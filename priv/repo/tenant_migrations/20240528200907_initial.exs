defmodule App.Repo.TenantMigrations.Initial do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:transactions, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :staff_id, :text
      add :type, :text, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :payment_id, :uuid, null: false
    end

    create table(:tokens, primary_key: false, prefix: prefix()) do
      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:retail_items, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text
      add :price, :decimal, null: false
      add :quantity, :decimal, null: false
      add :tax_rate, :boolean, null: false
      add :payment_id, :uuid, null: false
    end

    create table(:payments, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:transactions, prefix: prefix()) do
      modify :payment_id,
             references(:payments,
               column: :id,
               name: "transactions_payment_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    alter table(:retail_items, prefix: prefix()) do
      modify :payment_id,
             references(:payments,
               column: :id,
               name: "retail_items_payment_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    alter table(:payments, prefix: prefix()) do
      add :folio_number, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :category_id, :uuid, null: false
    end

    create table(:lodging_items, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text
      add :rate, :decimal, null: false
      add :check_in_date, :date, null: false
      add :check_out_date, :date, null: false
      add :tax_rate, :decimal, null: false

      add :payment_id,
          references(:payments,
            column: :id,
            name: "lodging_items_payment_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false
    end

    create table(:locations, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :address, :text, null: false
      add :city, :text, null: false
      add :state, :text, null: false
      add :zip, :text, null: false
      add :phone, :text, null: false
    end

    create table(:categories, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:payments, prefix: prefix()) do
      modify :category_id,
             references(:categories,
               column: :id,
               name: "payments_category_id_fkey",
               type: :uuid,
               prefix: prefix()
             )
    end

    alter table(:categories, prefix: prefix()) do
      add :name, :text, null: false
      add :default_lodging_tax_rate, :decimal, null: false
      add :default_retail_tax_rate, :decimal, null: false

      add :location_id,
          references(:locations,
            column: :id,
            name: "categories_location_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false
    end
  end

  def down do
    drop constraint(:categories, "categories_location_id_fkey")

    alter table(:categories, prefix: prefix()) do
      remove :location_id
      remove :default_retail_tax_rate
      remove :default_lodging_tax_rate
      remove :name
    end

    drop constraint(:payments, "payments_category_id_fkey")

    alter table(:payments, prefix: prefix()) do
      modify :category_id, :uuid
    end

    drop table(:categories, prefix: prefix())

    drop table(:locations, prefix: prefix())

    drop constraint(:lodging_items, "lodging_items_payment_id_fkey")

    drop table(:lodging_items, prefix: prefix())

    alter table(:payments, prefix: prefix()) do
      remove :category_id
      remove :updated_at
      remove :created_at
      remove :folio_number
    end

    drop constraint(:retail_items, "retail_items_payment_id_fkey")

    alter table(:retail_items, prefix: prefix()) do
      modify :payment_id, :uuid
    end

    drop constraint(:transactions, "transactions_payment_id_fkey")

    alter table(:transactions, prefix: prefix()) do
      modify :payment_id, :uuid
    end

    drop table(:payments, prefix: prefix())

    drop table(:retail_items, prefix: prefix())

    drop table(:tokens, prefix: prefix())

    drop table(:transactions, prefix: prefix())

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users, prefix: prefix())
  end
end
