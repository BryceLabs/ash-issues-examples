defmodule App.Repo.TenantMigrations.Initial do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
    end

    create unique_index(:users, ["email"], name: "users_unique_email_index")

    create table(:tokens, primary_key: false, prefix: prefix()) do
      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:orders, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :customer_name, :text, null: false
    end

    create table(:order_items, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :product_name, :text, null: false
      add :size_name, :text
      add :quantity, :decimal, null: false
      add :price, :decimal, null: false

      add :order_id,
          references(:orders,
            column: :id,
            name: "order_items_order_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false
    end
  end

  def down do
    drop constraint(:order_items, "order_items_order_id_fkey")

    drop table(:order_items, prefix: prefix())

    drop table(:orders, prefix: prefix())

    drop table(:tokens, prefix: prefix())

    drop_if_exists unique_index(:users, ["email"], name: "users_unique_email_index")

    drop table(:users, prefix: prefix())
  end
end
